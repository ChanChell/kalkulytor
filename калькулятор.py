# -*- coding: utf-8 -*-
"""Калькулятор.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bFx50Rr-kPVKZD-I0NvJHtN6B82GeK_P
"""

import inflect  # Импортируем библиотеку inflect для преобразования чисел в текст

# Словарь для сопоставления слов-чисел с их числовыми значениями
num_words = {
    "ноль": 0, "один": 1, "два": 2, "три": 3, "четыре": 4,
    "пять": 5, "шесть": 6, "семь": 7, "восемь": 8, "девять": 9,
    "десять": 10, "одиннадцать": 11, "двенадцать": 12, "тринадцать": 13,
    "четырнадцать": 14, "пятнадцать": 15, "шестнадцать": 16,
    "семнадцать": 17, "восемнадцать": 18, "девятнадцать": 19,
    "двадцать": 20, "тридцать": 30, "сорок": 40, "пятьдесят": 50,
    "шестьдесят": 60, "семьдесят": 70, "восемьдесят": 80, "девяносто": 90,
    "сто": 100
}

# Функция для преобразования текста в число
def text_to_number(text):
    parts = text.split()  # Разбиваем текст на отдельные слова
    if len(parts) == 1:
        return num_words[parts[0]]  # Возвращаем числовое значение этого слова

    numbers = []  # Список для хранения чисел
    operations = []  # Список для хранения операций

    i = 0
    while i < len(parts):
        part = parts[i]
        if part in num_words:  # Проверяем, является ли слово числом
            if i + 1 < len(parts) and parts[i + 1] in num_words:
                # Если это двухсловное число, то просто суммируем его значение
                numbers.append(num_words[part] + num_words[parts[i + 1]])
                i += 2  # Переходим к следующему числу
            else:
                numbers.append(num_words[part])
                i += 1
        elif part in ["плюс", "минусминус", "минус", "умножить", "разделить"]:  # Проверяем, является ли слово операцией
            operations.append(part)  # Добавляем операцию в список операций
            i += 1
        else:
            raise ValueError(f"Неизвестное слово: {part}")  # Выбрасываем исключение, если встретили неизвестное слово

    # Выполняем операции умножения и деления
    for i, operation in enumerate(operations):
        if operation == "умножить":
            numbers[i] *= numbers[i + 1]
            numbers.pop(i + 1)  # Удаляем второе число после умножения
            operations.pop(i)  # Удаляем операцию умножения
        elif operation == "разделить":
            if numbers[i + 1] == 0:
                raise ValueError("На ноль делить нельзя!")  # Выбрасываем исключение, если деление на ноль
            numbers[i] /= numbers[i + 1]  # Выполняем деление
            numbers.pop(i + 1)  # Удаляем второе число после деления
            operations.pop(i)  # Удаляем операцию деления

    # Выполняем операции сложения и вычитания
    result = numbers[0]
    for i, operation in enumerate(operations):
        if operation == "плюс":
            result += numbers[i + 1]
        elif operation == "минусминус":
            result += numbers[i + 1]
        elif operation == "минус":
            result -= numbers[i + 1]

    return result

# Функция для вычисления выражения
def calc(expression):
    text = expression.lower()  # Приводим текст к нижнему регистру
    result = text_to_number(text)  # Вызываем функцию text_to_number для преобразования текста в число
    return result

# Функция для преобразования числа в текст
def number_to_text(number):
    p = inflect.engine()  # Создаем объект inflect
    return p.number_to_words(number)  # Используем функцию number_to_words для преобразования числа в текст

# Цикл, который запрашивает выражения и выводит результаты
while True:
    expression = input("Введите пример словами (введите 00 для выхода): ")
    if expression == "00":  # Проверяем, не ввел ли пользователь "00" для выхода
        break
    try:
        result = calc(expression)  # Вызываем функцию calc для вычисления выражения
        result_text = number_to_text(result)  # Преобразуем результат в текст
        print(f"Результат: {result_text}")
    except ValueError as e:  # Обработка исключений
        print(f"Ошибка: {e}")




'''
В этом коде:
1) num_words - словарь, который хранит сопоставления между словами-числами и их соответствующими числовыми значениями.


2) text_to_number - функция, которая принимает текстовое математическое выражение и преобразует его в числовой результат.

Её действия:
1. Разбивает выражение на слова.
2. Проверяет, являются ли слова числами или операциями.
3. Собирает числа в список numbers и операции в список operations.
4. Выполняет операции умножения и деления в порядке их появления.
5. Выполняет операции сложения и вычитания в порядке их появления.
6. Возвращает итоговый числовой результат.


3)ValueError — это тип исключения в Python, которое возникает, когда функция получает аргумент, который имеет правильный тип, но является неверным значением.


4) calc - функция, которая принимает текстовое математическое выражение и возвращает числовой результат,
используя функцию text_to_number для преобразования выражения в число.


5) number_to_text - функция, которая принимает число и преобразует его в текстовое представление.


6) while True - бесконечный цикл, который повторяет следующие действия:

1. Запрашивает у пользователя текстовое математическое выражение с помощью input.
2. Проверяет, не ввел ли пользователь “00” для выхода.
3. Вычисляет результат выражения с помощью функции calc.
4. Преобразует результат в текст с помощью функции number_to_text.
5. Выводит результат пользователю.
'''